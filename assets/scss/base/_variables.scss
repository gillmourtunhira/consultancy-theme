// Color Variables
$color-primary: #FF6B00;
$color-green: #009688;
$color-yellow: #FFB800;
$color-secondary: #1E293B;
$color-accent: #3B82F6;
$color-text: #334155;
$color-text-light: #64748B;
$color-background: #F8FAFC;
$color-white: #FFFFFF;
$color-muted-white: #f9f9f9;
$color-black: #0F172A;
$color-border: #E2E8F0;
$color-muted-yellow: #FFF8E5;
$color-alice-blue: #eaf7ff;
$color-bright-gray: #E4F4F1;

// Typography
$font-family-primary: 'Manrope', sans-serif;
$font-family-heading: 'Manrope', sans-serif;

$font-size-base: 16px;
$font-size-small: 0.875rem;    // 14px
$font-size-medium: 1rem;       // 16px
$font-size-large: 1.125rem;    // 18px
$font-size-xl: 1.25rem;        // 20px
$font-size-2xl: 1.5rem;        // 24px
$font-size-3xl: 1.875rem;      // 30px
$font-size-4xl: 2.25rem;       // 36px
$font-size-5xl: 3rem;          // 48px

$font-weight-light: 300;
$font-weight-regular: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;

$line-height-tight: 1.25;
$line-height-snug: 1.375;
$line-height-normal: 1.5;
$line-height-relaxed: 1.625;
$line-height-loose: 2;

// Spacing
$space-0: 0;          // 0px
$space-1: 0.25rem;   // 4px
$space-2: 0.5rem;    // 8px
$space-3: 0.75rem;   // 12px
$space-4: 1rem;      // 16px
$space-5: 1.25rem;   // 20px
$space-6: 1.5rem;    // 24px
$space-8: 2rem;      // 32px
$space-10: 2.5rem;   // 40px
$space-12: 3rem;     // 48px
$space-16: 4rem;     // 64px
$space-20: 5rem;     // 80px
$space-24: 6rem;     // 96px
$space-32: 8rem;     // 128px

// Heights
$header-height: 6rem;

// Breakpoints
$breakpoint-sm: 640px;
$breakpoint-md: 768px;
$breakpoint-lg: 1024px;
$breakpoint-xl: 1280px;
$breakpoint-2xl: 1536px;

// Containers
$container-max-width: 1280px;
$container-padding: $space-4;

// Border Radius
$border-radius-sm: 0.125rem;  // 2px
$border-radius-md: 0.25rem;   // 4px
$border-radius-lg: 0.5rem;    // 8px
$border-radius-xl: 1rem;      // 16px
$border-radius-full: 9999px;  // Full rounded

// Box Shadows
$shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
$shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
$shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
$shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

// Transitions
$transition-base: all 0.3s ease;
$transition-fast: all 0.15s ease;
$transition-slow: all 0.5s ease;

// Z-Index
$z-index-dropdown: 1000;
$z-index-sticky: 1020;
$z-index-fixed: 1030;
$z-index-modal-backdrop: 1040;
$z-index-modal: 1050;
$z-index-popover: 1060;
$z-index-tooltip: 1070;

// Grid
$grid-columns: 12;
$grid-gutter: $space-6;

@use 'sass:meta';

// Utility classes for margins and paddings
// Based on Bootstrap-style naming: m-1, my-1, mx-1, p-1, py-1, px-1

// Map spacing variables to numeric values
$spacers: (
  0: $space-0,  // 0rem (0px)
  1: $space-1,  // 0.25rem (4px)
  2: $space-2,  // 0.5rem (8px)
  3: $space-3,  // 0.75rem (12px)
  4: $space-4,  // 1rem (16px)
  5: $space-5,  // 1.25rem (20px)
  6: $space-6,  // 1.5rem (24px)
  8: $space-8,  // 2rem (32px)
  10: $space-10,  // 2.5rem (40px)
  12: $space-12,  // 3rem (48px)
  16: $space-16,  // 4rem (64px)
  20: $space-20,  // 5rem (80px)
  24: $space-24,  // 6rem (96px)
  32: $space-32,  // 8rem (128px)
);

// Properties
$spacing-props: (
  m: margin, 
  p: padding
);

// Sides
$spacing-sides: (
  t: top,
  r: right,
  b: bottom,
  l: left,
  x: (left, right),
  y: (top, bottom)
);

// Generate all spacing utility classes
@each $prop-key, $prop-value in $spacing-props {
  // Generate all-sides utilities (e.g., m-1, p-2)
  @each $size-key, $size-value in $spacers {
    .#{$prop-key}-#{$size-key} {
      #{$prop-value}: $size-value !important;
    }
  }

  // Generate directional utilities (e.g., mt-1, pr-2, mx-3, py-4)
  @each $side-key, $side-value in $spacing-sides {
    @each $size-key, $size-value in $spacers {
      // Handle single sides (t, r, b, l)
      @if meta.type-of($side-value) == string {
        .#{$prop-key}#{$side-key}-#{$size-key} {
          #{$prop-value}-#{$side-value}: $size-value !important;
        }
      } 
      // Handle combined sides (x, y)
      @else if meta.type-of($side-value) == list {
        .#{$prop-key}#{$side-key}-#{$size-key} {
          @each $s in $side-value {
            #{$prop-value}-#{$s}: $size-value !important;
          }
        }
      }
    }
  }
  
  // Generate auto margin utilities
  @if $prop-key == "m" {
    .m-auto {
      margin: auto !important;
    }

    @each $side-key, $side-value in $spacing-sides {
      // Handle single sides for auto (mt-auto, mr-auto, etc.)
      @if meta.type-of($side-value) == string {
        .m#{$side-key}-auto {
          margin-#{$side-value}: auto !important;
        }
      } 
      // Handle combined sides for auto (mx-auto, my-auto)
      @else if meta.type-of($side-value) == list {
        .m#{$side-key}-auto {
          @each $s in $side-value {
            margin-#{$s}: auto !important;
          }
        }
      }
    }
  }
}
